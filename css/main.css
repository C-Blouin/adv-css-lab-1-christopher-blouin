/*! HTML5 Boilerplate v8.0.0 | MIT License | https://html5boilerplate.com/ */

/* main.css 2.1.0 | MIT License | https://github.com/h5bp/main.css#readme */
/*
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */

/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */

html {
  color: #222;
  font-size: 1em;
  line-height: 1.4;
}

/*
 * Remove text-shadow in selection highlight:
 * https://twitter.com/miketaylr/status/12228805301
 *
 * Vendor-prefixed and regular ::selection selectors cannot be combined:
 * https://stackoverflow.com/a/16982510/7133471
 *
 * Customize the background color to match your design.
 */

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

/*
 * A better looking default horizontal rule
 */

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/*
 * Remove the gap between audio, canvas, iframes,
 * images, videos and the bottom of their containers:
 * https://github.com/h5bp/html5-boilerplate/issues/440
 */

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

/*
 * Remove default fieldset styles.
 */

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/*
 * Allow only vertical resizing of textareas.
 */

textarea {
  resize: vertical;
}

/* ==========================================================================
   Author's custom styles
   ========================================================================== */

/* 

Advanced Interface Design with CSS - Lab 1 - Christopher Blouin

*/

html {
  /* Apply box-sizing: border-box to negate potential issues with grid/flexbox overflow */
  box-sizing: border-box;
  /* Allow the browser to scroll smoothly when the internal links on the page are clicked */
  scroll-behavior: smooth;
}

/* Allow all child content to inherit the HTML box sizing propertie from the parent. */
*,
*::before,
*::after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit;
}

/* Define variables in the root, these variable can be called in my CSS declarations, and only need to change them in one place if I want to make adjustments to type, colors, etc. */
:root {
  /* Set font size variables. */
  --heading-xlarge: 64px;
  --heading-large: 50px;
  --heading-medium: 34px;
  --heading-small: 26px;
  --font-xxl: 24px;
  --font-xl: 22px;
  --font-large: 18px;
  --font-medium: 16px;
  --font-small: 14px;
  --font-xsmall: 12px;
  /* Set font family variables. */
  --heading-font: "Playfair Display", serif;
  --body-font: "Source Sans 3", sans-serif;
  /* Global transition property */
  --transition: 0.25s ease-in-out;
  /* Set color variables */
  --primary-accent: #72b328;
  --dark-gray: #222;
  --light-gray: #f5f5f5;
  --white: #fff;
}

/* Set the body font family, which can be overwriting later in the cascade. */
body {
  font-family: var(--body-font);
  font-size: var(--font-medium);
  font-weight: 400;
}

/* Using a combinator selector, overwrite the body font family and apply a display font "Rufina" with a weight of 700 to appear bolder */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--heading-font);
  font-weight: 700;
  /* Remove the default margin and padding on the headings to manually space elements. */
  padding: 0;
  margin: 0;
}

/* Declare primary heading font sizes using the scale created in the root variables. */
h1 {
  /* Clamp the primary h1 between the large and xtra large font sizes depending on the viewport width, dynamically adjust to fit responsively. */
  font-size: clamp(var(--heading-large), 5vw, var(--heading-xlarge));
}

h2 {
  font-size: var(--heading-medium);
}

h3 {
  font-size: var(--heading-small);
}

header {
  background: var(--light-gray);
  color: var(--dark-gray);
  padding: 3.75rem 0;
}

/* Display the navigation ordered list as flex with wrapping to prevent overflow. */
nav ol {
  display: flex;
  justify-content: center;
  /* Space the child elements with a gap on the parent */
  gap: 2rem 1rem;
  flex-wrap: wrap;
  margin: 3rem 0;
  padding: 0.25rem;
}

/* Start of Navigation Link & Unordered/Ordered List Styles */
nav ol li a {
  /* Create button looking navigation links within the header navigation. */
  background: var(--dark-gray);
  color: var(--white);
  /* Add padding and a border-radius to the navigation anchors. */
  padding: 1rem 1.25rem;
  border-radius: 2rem;
}

/* When the nav links are hovered, the background will become transparent with an outline to let the user know the link is currently being hovered over. */
nav ol li a:hover {
  outline: 1px solid var(--primary-accent);
}

/* Keep the background transparent on any navigation link that is active. */
nav ol li a:hover,
nav ol li a:hover:active {
  background: transparent;
}

/* Remove the text underline on the anchor elements of only the navigation and section paragraph links. */
nav ol li a,
section p a {
  text-decoration: none;
}

section p a {
  font-weight: 500;
}

/* Let users know they are hovering the paragraph links by underlining and altering the font color. */
section p a:hover {
  color: var(--dark-gray);
  text-decoration: underline;
}

/* Add a slight margin to the top and bottom of the parent list elements (ul and ol), globally remove the list-style */
ul,
ol {
  margin: 1rem 0;
  padding: 0;
  /* Remove the list style as the markup was already numbered (atleast the ordereded lists). */
  list-style: none;
}

/* Add some spacing between the list item elements */
ul li,
ol li {
  padding: 0.2rem 0;
}

/* Use the before pseudo selector to place a hyphen before each list item, add some spacing and increase the size of the content hyphen with font-size. */
ul li::before {
  content: "-";
  padding-right: 1rem;
  font-size: var(--font-xlarge);
}

/* Apply the primary root accent color to all specified elements using a combinator selector to reduce redundant code. */
h1,
ul li::before,
ol li::marker,
section p a,
ul li a:hover,
nav ol li a:hover,
footer p a:hover,
nav ol li a:hover:active {
  color: var(--primary-accent);
}

/* Adjust anchor element colors that aren't nested in the navigation or paragraphs elements. */
ul li a,
ol li a,
footer p a {
  color: var(--dark-gray);
}

/* Add a transition variable to all of the link elements letting the end user indentify what is being hovered on. */
ul li a:hover,
nav ol li a:hover,
footer p a:hover,
section p a:hover {
  transition: var(--transition);
}

/* The footer link turns white on hover as the background is dark gray */
footer p small a:hover {
  color: var(--white);
}

ul li a,
ol li a,
footer p a {
  color: var(--dark-gray);
}

/* End of Navigation Link & Unordered/Ordered List Styles */

/* Add some whitespace to the section content. */
section {
  padding: 1rem 0;
}

/* Apply a max-width to the primary content alongside centered everything with margin: auto, and add some slight padding. */
#header-grid,
#introduction,
#contents,
main {
  margin: 3rem auto 8rem;
  max-width: 1200px;
  width: 100%;
  padding: 1rem;
}

/* Override the top and bottom margins that were set above in the cascade on the #header-grid, #introduction,
#contents sections */
#header-grid {
  margin: 0 auto;
}
#introduction,
#contents {
  margin: 0 auto 0;
}

/* All paragraph text will be justified, spaced with line-height, and hyphenated to increase readability. */
p {
  text-align: justify;
  hyphens: auto;
  line-height: 1.6;
}

/* On mobile, the intro paragraph will be centered to prevent potential overflow. */
#introduction p {
  text-align: center;
}

/* Set the header section and #grid-columns to display grid with a single column layout for mobile use. */

#header-grid,
#grid-columns {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
}

/* Create a fixed footer at the bottom of the page with display flex so the children elements are aligned correctly ion the center. */
footer {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  background-color: var(--dark-gray);
  color: var(--white);
  height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Center the text in the footer. And only capitalize the first letter of each string of text wrapped in the of the paragraph element */
footer p {
  text-align: center;
  text-transform: capitalize;
}

/* Lowercase the anchor element text and change it's color to the primary accent. */
footer p a {
  text-transform: lowercase;
  color: var(--primary-accent);
}

footer p small {
  font-size: var(--font-medium);
}

/* Start of Back to Top Button Styles */
#back-to-top {
  border: none;
  /* Hide the button initially, I will display it to block with JavaScript once the viewport scroll window Y position hits 300 pixels */
  display: none;
  /* Set the position to fixed so it's always accesible to the end user, I positioned the button in the bottom right. */
  position: fixed;
  right: 15px;
  bottom: 95px;
  width: 50px;
  height: 50px;
  /* Create a circle with border radius */
  border-radius: 50%;
  background-color: #72b328;
  color: var(--dark-gray);
  z-index: 10;
  /* Cursor of pointer to let user know it's a clickable element. */
  cursor: pointer;
  /* Set the opacity, transition, and animation properties that will be controlled through keyframes and JavaScript.  */
  opacity: 0;
  transition: opacity 0.3s ease-in-out;
  animation: fadeIn 0.3s forwards; /* Animation for smooth appearance */
}

/*  */
#back-to-top:hover {
  /* Add a color transition when the button is hovered. */
  transition: var(--transition);
  background-color: var(--dark-gray);
  color: var(--white);
  /* Position the button over the other DOM content */
  z-index: 2;
}

/* Back to Top Button Keyframes */
@keyframes fadeIn {
  /* Start the animation with 0 opacity off to the side of the screen. */
  0% {
    opacity: 0;
    transform: translateX(100%);
  }
  /* End the animation with an opacity of 1 to make the element visible it will slide from the right into the viewport. */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* End of Back to Top Button Styles */

/* Media Query to Control the Desktop layout, as the min-width of the viewport needs to be 768px to render these styles! */
@media screen and (min-width: 768px) {
  #header-grid,
  main {
    padding: 4rem;
  }

  /* Center the header grid columns */
  #header-grid {
    justify-content: center;
  }

  /* On devices greater than 768px wide in the viewport, the grid columns increase to 2 equal columns */
  #header-grid,
  #grid-columns {
    grid-template-columns: repeat(2, 1fr);
    gap: 4.5rem;
  }

  /* Intro text is justified on desktop */
  #introduction p {
    text-align: justify;
  }

  /* Start the navigation ordered list at the start of the flex content. */
  nav ol {
    justify-content: flex-start;
    margin: 2rem 0;
  }

  /* Vertical whitespace between list items in the navigation */
  nav ol li {
    margin: 0.25rem 0;
  }
}

/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

.hidden,
[hidden] {
  display: none !important;
}

/*
 * Hide only visually, but have it available for screen readers:
 * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 *
 * 1. For long content, line feeds are not interpreted as spaces and small width
 *    causes content to wrap 1 word per line:
 *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
 */

.sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  /* 1 */
}

/*
 * Extends the .sr-only class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

.sr-only.focusable:active,
.sr-only.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}

/*
 * Hide visually and from screen readers, but maintain layout
 */

.invisible {
  visibility: hidden;
}

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.clearfix::before,
.clearfix::after {
  content: " ";
  display: table;
}

.clearfix::after {
  clear: both;
}

/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
  /* Style adjustments for viewports that meet the condition */
}

@media print,
  (-webkit-min-device-pixel-ratio: 1.25),
  (min-resolution: 1.25dppx),
  (min-resolution: 120dpi) {
  /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid the additional HTTP request:
   https://www.phpied.com/delay-loading-your-print-css/
   ========================================================================== */

@media print {
  *,
  *::before,
  *::after {
    background: #fff !important;
    color: #000 !important;
    /* Black prints faster */
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]::after {
    content: " (" attr(href) ")";
  }

  abbr[title]::after {
    content: " (" attr(title) ")";
  }

  /*
   * Don't show links that are fragment identifiers,
   * or use the `javascript:` pseudo protocol
   */
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: "";
  }

  pre {
    white-space: pre-wrap !important;
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  /*
   * Printing Tables:
   * https://web.archive.org/web/20180815150934/http://css-discuss.incutio.com/wiki/Printing_Tables
   */
  thead {
    display: table-header-group;
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}
